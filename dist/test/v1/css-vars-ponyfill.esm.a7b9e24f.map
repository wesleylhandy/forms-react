{"version":3,"sources":["../src/index.js","../node_modules/get-css-data/dist/get-css-data.esm.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js"],"names":["href","getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","isValidCss","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","parser","document","createElement","forEach","url","i","isIElte9CORS","setAttribute","String","Boolean","all","window","atob","host","split","location","isSameProtocol","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","warn","concat","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","baseUrl","callbackFn","__errorData","__errorRules","importData","parseImportData","rules","absoluteUrls","responseImportData","rule","replace","absoluteRules","push","responseArray","importText","resolvedCssText","errorData","data","test","ignoreRules","match","getFullUrl","oldUrl","newUrl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","_extends","onlyVars","removeComments","error","msg","Error","re","exec","close","whitespace","comment","type","comments","c","cmnts","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","keyframe","vals","values","at_rule","at_keyframes","vendor","name","frame","frames","keyframes","at_supports","supports","at_host","at_media","media","at_custom_m","at_page","selectors","at_document","at_fontface","at_x","hasVarFunc","some","decl","obj","balancedMatch","hasVarDecl","sel","core","stylesheet","errors","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","variableStore","dom","temp","user","transformVars","fixNestedCalc","persist","preserve","variables","onWarning","JSON","parse","stringify","cssTree","parseCss","Object","varNameIndices","splice","keys","key","newRule","resolvedValue","resolveValue","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","__recursiveFallback","valueData","warningIntro","resolveFunc","fallback","hasOwnProperty","replacement","unresolvedFallback","isBrowser","isNativeSupport","CSS","defaults","onlyLegacy","shadowDOM","silent","updateDOM","updateURLs","watch","cssKeyframes","cssRootRules","cssUrls","cssVars","cssVarsObserver","isShadowDOMReady","styleNodeId","pkgName","handleError","message","sourceNode","handleWarning","isShadowElm","shadowRoot","targetElm","documentElement","style","setProperty","cssRootDecls","nodeArray","transformCss","addMutationObserver","disconnect","cssUrl","responseUrl","responseURL","statusText","errorMsg","cssMarker","styleNode","hasKeyframes","group1","lastNode","querySelector","nextSibling","parentNode","insertBefore","fixKeyframes","errorThrown","errorNode","elms","addEventListener","init","evt","removeEventListener","ignoreId","MutationObserver","tagName","id","debounceTimer","mutations","isUpdateMutation","mutation","target","addedNodes","removedNodes","isValidLink","disabled","isValidStyle","clearTimeout","observe","attributes","attributeFilter","childList","subtree","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","len","offsetHeight","nodeStyle"],"mappings":"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","file":"css-vars-ponyfill.esm.a7b9e24f.map","sourceRoot":"../../../src","sourcesContent":["// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport transformCss        from './transform-css';\nimport { variableStore }   from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst defaults = {\n    // Sources\n    rootElement  : isBrowser ? document : null,\n    include      : 'style,link[rel=stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, parseCSS\n    preserve     : false, // transformCss\n    shadowDOM    : false, // cssVars\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    updateURLs   : true,  // cssVars\n    variables    : {},    // transformCss\n    watch        : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes (@keyframes & @-VENDOR-keyframes)\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS root vars\n    cssRootRules: /(?::root\\s*{\\s*[^}]*})/g,\n    // CSS url(...) values\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS variable :root declarations and var() function values\n    cssVars: /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\n\n// Mutation observer referece created via options.watch\nlet cssVarsObserver  = null;\n\n// Indicates if document-level custom property values have been parsed, stored,\n// and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls.\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) a reference to\n *                   the appended <style> node, and 3) an object containing all\n *                   custom properies names and values.\n *\n * @example\n *\n *   cssVars({\n *     rootElement  : document,\n *     include      : 'style,link[rel=\"stylesheet\"]',\n *     exclude      : '',\n *     fixNestedCalc: true,\n *     onlyLegacy   : true,\n *     onlyVars     : false,\n *     preserve     : false,\n *     shadowDOM    : false,\n *     silent       : false,\n *     updateDOM    : true,\n *     updateURLs   : true,\n *     variables    : {\n *       // ...\n *     },\n *     watch        : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings    = Object.assign({}, defaults, options);\n    const styleNodeId = pkgName;\n\n    // Always exclude styleNodeId element, which is the generated <style> node\n    // containing previously transformed CSS.\n    settings.exclude = `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : '');\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const isShadowElm = settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host;\n\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    // Convert all property names to leading '--' style\n                    const prop  = `--${key.replace(/^-+/, '')}`;\n                    const value = settings.variables[key];\n\n                    targetElm.style.setProperty(prop, value);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (isShadowElm && !isShadowDOMReady) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    const cssRootDecls = (cssText.match(regex.cssRootRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssRootDecls || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Transform CSS, which stores custom property values from\n                    // cssText in variableStore. This step ensures that\n                    // variableStore contains all document-level custom property\n                    // values for subsequent ponyfill calls.\n                    transformCss(cssText, {\n                        persist: true\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Add / recreate MutationObserver\n            if (settings.watch) {\n                addMutationObserver(settings, styleNodeId);\n            }\n            // Disconnect existing\n            else if (settings.watch === false && cssVarsObserver) {\n                cssVarsObserver.disconnect();\n            }\n\n            getCssData({\n                rootElement: settings.rootElement,\n                include: settings.include,\n                exclude: settings.exclude,\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter: settings.onlyVars ? regex.cssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        const cssUrls = cssText\n                            // Remove comments to avoid processing @import in comments\n                            .replace(regex.cssComments, '')\n                            // Match url(...) values\n                            .match(regex.cssUrls) || [];\n\n                        cssUrls.forEach(cssUrl => {\n                            const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n                            const newUrl = getFullUrl(oldUrl, url);\n\n                            cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n                        });\n                    }\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    const cssMarker = /\\/\\*__CSSVARSPONYFILL-(\\d+)__\\*\\//g;\n                    let   styleNode = null;\n\n                    // Concatenate cssArray items, replacing those that do not\n                    // contain a CSS custom property declaraion or function with\n                    // a temporary marker . After the CSS is transformed, the\n                    // markers will be replaced with the matching cssArray item.\n                    // This optimization is done to avoid processing CSS that\n                    // will not change as a results of the ponyfill.\n                    cssText = cssArray.map((css, i) => regex.cssVars.test(css) ? css : `/*__CSSVARSPONYFILL-${i}__*/`).join('');\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        const hasKeyframes = regex.cssKeyframes.test(cssText);\n\n                        // Replace markers with appropriate cssArray item\n                        cssText = cssText.replace(cssMarker, (match, group1) => cssArray[group1]);\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = settings.rootElement.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode && lastNode.parentNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n\n                            if (hasKeyframes) {\n                                fixKeyframes(settings.rootElement);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    // Process shadow DOM\n                    if (settings.shadowDOM) {\n                        const elms = [\n                            settings.rootElement,\n                            ...settings.rootElement.querySelectorAll('*')\n                        ];\n\n                        // Iterates over all elements in rootElement and calls\n                        // cssVars on each shadowRoot, passing document-level\n                        // custom properties as options.variables.\n                        for (let i = 0, elm; (elm = elms[i]); ++i) {\n                            if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                const shadowSettings = Object.assign({}, settings, {\n                                    rootElement: elm.shadowRoot,\n                                    variables  : variableStore.dom\n                                });\n\n                                cssVars(shadowSettings);\n                            }\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode, JSON.parse(JSON.stringify(settings.updateDOM ? variableStore.dom : variableStore.temp)));\n                }\n            });\n        }\n\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n * @param {string} ignoreId\n */\nfunction addMutationObserver(settings, ignoreId) {\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    const isLink  = node => node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n    const isStyle = node => node.tagName === 'STYLE' && (ignoreId ? node.id !== ignoreId : true);\n\n    let debounceTimer = null;\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n    }\n\n    settings.watch = defaults.watch;\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        let isUpdateMutation = false;\n\n        mutations.forEach(mutation => {\n            if (mutation.type === 'attributes') {\n                isUpdateMutation = isLink(mutation.target) || isStyle(mutation.target);\n            }\n            else if (mutation.type === 'childList') {\n                const addedNodes   = Array.apply(null, mutation.addedNodes);\n                const removedNodes = Array.apply(null, mutation.removedNodes);\n\n                isUpdateMutation = [].concat(addedNodes, removedNodes).some(node => {\n                    const isValidLink  = isLink(node) && !node.disabled;\n                    const isValidStyle = isStyle(node) && !node.disabled && regex.cssVars.test(node.textContent);\n\n                    return (isValidLink || isValidStyle);\n                });\n            }\n\n            if (isUpdateMutation) {\n                clearTimeout(debounceTimer);\n\n                debounceTimer = setTimeout(function() {\n                    cssVars(settings);\n                }, 1);\n            }\n        });\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['disabled', 'href'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n","/*!\n * get-css-data\n * v1.6.3\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2019 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function isValidCss() {\n        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var isHTML = cssText.trim().charAt(0) === \"<\";\n        return !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach(function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    if (isValidCss(xdr.responseText)) {\n                        onSuccess(xdr.responseText, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach(function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {\n                        return rule.cssText;\n                    }).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced from 'balanced-match';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS stringt to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.onlyVars=false] Remove declarations that do not\n *                  contain a CSS variable from the return value. Note that\n *                  @font-face and @keyframe rules require all declarations to\n *                  be returned if a CSS variable is used.\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object.\n * @returns {object}\n */\nfunction cssParse(css, options = {}) {\n    const defaults = {\n        onlyVars      : false,\n        removeComments: false\n    };\n    const settings = Object.assign({}, defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            return m[0]\n                .trim() // remove all comments from selectors\n                .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n                .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                })\n                .split(/\\s*(?![^(]*\\)),\\s*/)\n                .map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret = at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x();\n\n            if (ret && settings.onlyVars) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (settings.onlyVars) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // When onlyVars:true, skip rulset if it does not contain a :root\n            // variable declaration of a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = balancedMatch.pre.indexOf(':root') !== -1 && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = !settings.onlyVars ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => s.indexOf(':root') !== -1) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\nconst variableStore       = {\n    // Persisted custom property values (matches modern browsers)\n    dom : {},\n    // Non-persisted custom properties values\n    temp: {},\n    // Persisted custom property values passed using options.variables\n    user: {}\n};\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=false] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : false,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const settings = Object.assign({}, defaults, options);\n    const map      = settings.persist ? variableStore.dom : variableStore.temp = JSON.parse(JSON.stringify(variableStore.dom));\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText, {\n        onlyVars: settings.onlyVars\n    });\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Restore persisted user values\n    Object.keys(variableStore.user).forEach(key => {\n        map[key] = variableStore.user[key];\n    });\n\n    // Handle variables defined in settings.variables\n    if (Object.keys(settings.variables).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(settings.variables).forEach(key => {\n            // Convert all property names to leading '--' style\n            const prop  = `--${key.replace(/^-+/, '')}`;\n            const value = settings.variables[key];\n\n            // Persist settings.variables values\n            if (settings.persist) {\n                variableStore.user[prop] = value;\n            }\n\n            // Update map value with settings.variables value\n            if (map[prop] !== value) {\n                map[prop] = value;\n\n                // Add new declaration to newRule\n                newRule.declarations.push({\n                    type    : 'declaration',\n                    property: prop,\n                    value   : value\n                });\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve && newRule.declarations.length) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== decl.value) {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolves CSS var() function(s) with `map` data or fallback value(s). Returns\n * original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} map CSS custom property key/values\n * @param {object} settings Settings object passed from transformVars()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a map or fallback value. Allows restoring\n *                 original var() function from recursive resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to map or fallback\n *                  value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, map, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData    = balanced('(', ')', value);\n    const warningIntro = 'CSS transform warning:';\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => map['--x'] or map['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when map['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0].replace(/[\\s\\n\\t]/g, '');\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = map.hasOwnProperty(name) ? String(map[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, map, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, map, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, map, settings)})`\n            + resolveValue(valueData.post, map, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\nexport { variableStore };"]}